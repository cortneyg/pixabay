{"version":3,"sources":["components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["ImageResults","state","open","currentImg","savedImages","handleOpen","img","a","setState","localStorage","setItem","JSON","stringify","handleClose","imageListContent","images","this","props","storage","getItem","imagesLink","parse","map","Grid","container","title","tags","key","id","onClick","largeImageURL","actionIcon","color","style","position","src","alt","width","height","top","left","transform","backgroundColor","fontSize","padding","border","cursor","borderRadius","borderCollapse","msTransform","find","res","actions","label","primary","spacing","item","xs","modal","onRequestClose","Array","from","Set","index","href","Component","Search","searchText","amount","apiUrl","apiKey","category","onTextChange","e","val","target","value","name","axios","get","then","data","hits","catch","err","console","log","onCategoryChange","onAmountChange","onChange","floatingLabelText","fullWidth","Select","native","aria-label","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.883d88dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\nclass ImageResults extends Component {\n  state = {\n    open: false,\n    currentImg: '',\n    savedImages: []\n  };\n\n  handleOpen = async (img) => {\n    this.setState({ ...this.state, savedImages: [...this.state.savedImages, img] });\n    localStorage.setItem('state', JSON.stringify(this.state))\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    let imageListContent;\n    const { images } = this.props;\n    let storage = localStorage.getItem('state')\n    let imagesLink = JSON.parse(storage)\n\n    if (images) {\n      imageListContent = (\n        <div>\n          {images.map(img => (\n            <Grid container\n              title={img.tags}\n              key={img.id}\n              onClick={() => this.handleOpen(img.largeImageURL)}\n              actionIcon={\n                <IconButton>\n                  <ZoomIn color=\"white\" />\n                </IconButton>\n              }\n            >\n              <div style={{position: 'relative'}}>\n                <img src={img.largeImageURL} alt=\"\" style={{width: '200px', height: \"200px\"}}/>\n                <button style={{\n                position: 'absolute',\n                width:'180px',\n                top: '80%',\n                left: \"50%\", transform: \"translate(-50%, -50%)\",\n                backgroundColor: '#000',\n                color: 'white',\n                fontSize: \"16px\",\n                padding: \"12px 24px\",\n                border: \"none\",\n                cursor:\"pointer\",\n                borderRadius: \"5px\",\n                borderCollapse: \"black\",\n                msTransform: \"translate(-50%, -50%)\", \n                }}>{\n                  imagesLink.savedImages.find(res => res === img.largeImageURL) ? 'Saved' : 'Save'\n                }</button>\n              </div>\n              \n            </Grid>\n          ))}\n        </div>\n      );\n    } else {\n      imageListContent = null;\n    }\n\n    const actions = [\n      <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\n    ];\n\n    return (\n      <>\n      <div>\n        <Grid container spacing={3}>\n        <Grid item xs={6}>\n          {imageListContent}\n        <Dialog\n          actions={actions}\n          modal={false}\n          open={this.state.open}\n          onRequestClose={this.handleClose}\n        >\n          <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }} />\n        </Dialog>\n        </Grid>\n        <Grid item xs={6}>\n          <h3>Saved Images</h3>\n          {\n           imagesLink && Array.from(new Set(imagesLink.savedImages)).map((res, index) => (\n             <p key={index}> <a href={res}>{res}</a> </p>\n           ))\n          }\n        </Grid>\n        </Grid>\n      </div>\n      </>\n    );\n  }\n}\n\nImageResults.propTypes = {\n  images: PropTypes.array.isRequired\n};\n\nexport default ImageResults;","import React, { Component } from 'react';\nimport TextField from 'material-ui/TextField';\nimport SelectField from 'material-ui/SelectField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from 'material-ui/MenuItem';\nimport axios from 'axios';\nimport ImageResults from '../image-results/ImageResults';\n\nclass Search extends Component {\n  state = {\n    searchText: '',\n    amount: 10,\n    apiUrl: 'https://pixabay.com/api',\n    apiKey: '16714265-24d4e1ff365d52099e14a79c2',\n    images: [],\n    category: ''\n  };\n\n  onTextChange = e => {\n    const val = e.target.value;\n    this.setState({ [e.target.name]: val }, () => {\n      if (val === '') {\n        this.setState({ images: [] });\n      } else {\n        axios\n          .get(\n            `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${\n              this.state.searchText\n            }&image_type=photo&per_page=${this.state.amount}&safesearch=true`\n          )\n          .then(res => this.setState({ images: res.data.hits }))\n          .catch(err => console.log(err));\n      }\n    });\n  };\n\n  onCategoryChange = e => {\n    this.setState({...this.state, category: e.target.value})\n        axios\n          .get(\n            `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${\n              this.state.searchText\n            }&image_type=photo&per_page=${this.state.amount}&category=${this.state.category}&safesearch=true`\n          )\n          .then(res => this.setState({ images: res.data.hits }))\n          .catch(err => console.log(err));\n  };\n\n  onAmountChange = (e, index, value) => this.setState({ amount: value });\n\n  render() {\n    console.log(this.state.images);\n    return (\n      <div>\n        <TextField\n          name=\"searchText\"\n          value={this.state.searchText}\n          onChange={this.onTextChange}\n          floatingLabelText=\"Search For Images\"\n          fullWidth={true}\n        />\n        <br />\n\n          <Select\n          native\n          onChange={this.onCategoryChange}\n        >\n\n          <option aria-label=\"None\" value=\"\" />\n          <option value={'fashion'}>Fashion</option>\n          <option value={'nature'}>Nature</option>\n          <option value={'backgrounds'}>Backgrounds</option>\n          <option value={'science'}>Science</option>\n          <option value={'feelings'}>Feelings</option>\n          <option value={'religion'}>Religion</option>\n          <option value={'health'}>Health</option>\n          <option value={'places'}>Places</option>\n          <option value={'animals'}>Animals</option>\n          <option value={'industry'}>Industry</option>\n          <option value={'food'}>Food</option>\n          <option value={'sports'}>Sports</option>\n          <option value={'transportation'}>Transportation</option>\n          <option value={'travel'}>Travel</option>\n          <option value={'buildings'}>Buildings</option>\n          <option value={'business'}>Business</option>\n          <option value={'music'}>Music</option>\n          <option value={'computer'}>Computer</option>\n        </Select>\n        <br />\n        {this.state.images.length > 0 ? (\n          <ImageResults images={this.state.images} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Search from './components/search/Search';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div>\n          <Search />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}